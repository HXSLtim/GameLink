// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\a2778\Desktop\code\GameLink\backend\internal\repository\interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "gamelink/internal/model"
	repository "gamelink/internal/repository"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockGameRepository is a mock of GameRepository interface.
type MockGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameRepositoryMockRecorder
}

// MockGameRepositoryMockRecorder is the mock recorder for MockGameRepository.
type MockGameRepositoryMockRecorder struct {
	mock *MockGameRepository
}

// NewMockGameRepository creates a new mock instance.
func NewMockGameRepository(ctrl *gomock.Controller) *MockGameRepository {
	mock := &MockGameRepository{ctrl: ctrl}
	mock.recorder = &MockGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameRepository) EXPECT() *MockGameRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGameRepository) Create(ctx context.Context, game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGameRepositoryMockRecorder) Create(ctx, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameRepository)(nil).Create), ctx, game)
}

// Delete mocks base method.
func (m *MockGameRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGameRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockGameRepository) Get(ctx context.Context, id uint64) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGameRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGameRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockGameRepository) List(ctx context.Context) ([]model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGameRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGameRepository)(nil).List), ctx)
}

// ListPaged mocks base method.
func (m *MockGameRepository) ListPaged(ctx context.Context, page, pageSize int) ([]model.Game, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaged", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.Game)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaged indicates an expected call of ListPaged.
func (mr *MockGameRepositoryMockRecorder) ListPaged(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaged", reflect.TypeOf((*MockGameRepository)(nil).ListPaged), ctx, page, pageSize)
}

// Update mocks base method.
func (m *MockGameRepository) Update(ctx context.Context, game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGameRepositoryMockRecorder) Update(ctx, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGameRepository)(nil).Update), ctx, game)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, id)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), ctx, email)
}

// FindByPhone mocks base method.
func (m *MockUserRepository) FindByPhone(ctx context.Context, phone string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserRepositoryMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserRepository)(nil).FindByPhone), ctx, phone)
}

// Get mocks base method.
func (m *MockUserRepository) Get(ctx context.Context, id uint64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, id)
}

// GetByPhone mocks base method.
func (m *MockUserRepository) GetByPhone(ctx context.Context, phone string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", ctx, phone)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockUserRepositoryMockRecorder) GetByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockUserRepository)(nil).GetByPhone), ctx, phone)
}

// List mocks base method.
func (m *MockUserRepository) List(ctx context.Context) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepository)(nil).List), ctx)
}

// ListPaged mocks base method.
func (m *MockUserRepository) ListPaged(ctx context.Context, page, pageSize int) ([]model.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaged", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaged indicates an expected call of ListPaged.
func (mr *MockUserRepositoryMockRecorder) ListPaged(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaged", reflect.TypeOf((*MockUserRepository)(nil).ListPaged), ctx, page, pageSize)
}

// ListWithFilters mocks base method.
func (m *MockUserRepository) ListWithFilters(ctx context.Context, opts repository.UserListOptions) ([]model.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithFilters", ctx, opts)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWithFilters indicates an expected call of ListWithFilters.
func (mr *MockUserRepositoryMockRecorder) ListWithFilters(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithFilters", reflect.TypeOf((*MockUserRepository)(nil).ListWithFilters), ctx, opts)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerRepository) Create(ctx context.Context, player *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlayerRepositoryMockRecorder) Create(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerRepository)(nil).Create), ctx, player)
}

// Delete mocks base method.
func (m *MockPlayerRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayerRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayerRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPlayerRepository) Get(ctx context.Context, id uint64) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlayerRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlayerRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockPlayerRepository) List(ctx context.Context) ([]model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlayerRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlayerRepository)(nil).List), ctx)
}

// ListPaged mocks base method.
func (m *MockPlayerRepository) ListPaged(ctx context.Context, page, pageSize int) ([]model.Player, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaged", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.Player)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaged indicates an expected call of ListPaged.
func (mr *MockPlayerRepositoryMockRecorder) ListPaged(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaged", reflect.TypeOf((*MockPlayerRepository)(nil).ListPaged), ctx, page, pageSize)
}

// Update mocks base method.
func (m *MockPlayerRepository) Update(ctx context.Context, player *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlayerRepositoryMockRecorder) Update(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlayerRepository)(nil).Update), ctx, player)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, order)
}

// Delete mocks base method.
func (m *MockOrderRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOrderRepository) Get(ctx context.Context, id uint64) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockOrderRepository) List(ctx context.Context, opts repository.OrderListOptions) ([]model.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrderRepositoryMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderRepository)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), ctx, order)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(ctx context.Context, payment *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, payment)
}

// Delete mocks base method.
func (m *MockPaymentRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPaymentRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPaymentRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPaymentRepository) Get(ctx context.Context, id uint64) (*model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPaymentRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPaymentRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockPaymentRepository) List(ctx context.Context, opts repository.PaymentListOptions) ([]model.Payment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPaymentRepositoryMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPaymentRepository)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockPaymentRepository) Update(ctx context.Context, payment *model.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentRepositoryMockRecorder) Update(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentRepository)(nil).Update), ctx, payment)
}

// MockPermissionRepository is a mock of PermissionRepository interface.
type MockPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepositoryMockRecorder
}

// MockPermissionRepositoryMockRecorder is the mock recorder for MockPermissionRepository.
type MockPermissionRepositoryMockRecorder struct {
	mock *MockPermissionRepository
}

// NewMockPermissionRepository creates a new mock instance.
func NewMockPermissionRepository(ctrl *gomock.Controller) *MockPermissionRepository {
	mock := &MockPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepository) EXPECT() *MockPermissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionRepository) Create(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPermissionRepositoryMockRecorder) Create(ctx, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionRepository)(nil).Create), ctx, perm)
}

// Delete mocks base method.
func (m *MockPermissionRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPermissionRepository) Get(ctx context.Context, id uint64) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionRepository)(nil).Get), ctx, id)
}

// GetByMethodAndPath mocks base method.
func (m *MockPermissionRepository) GetByMethodAndPath(ctx context.Context, method, path string) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMethodAndPath", ctx, method, path)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMethodAndPath indicates an expected call of GetByMethodAndPath.
func (mr *MockPermissionRepositoryMockRecorder) GetByMethodAndPath(ctx, method, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMethodAndPath", reflect.TypeOf((*MockPermissionRepository)(nil).GetByMethodAndPath), ctx, method, path)
}

// GetByResource mocks base method.
func (m *MockPermissionRepository) GetByResource(ctx context.Context, resource, action string) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByResource", ctx, resource, action)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByResource indicates an expected call of GetByResource.
func (mr *MockPermissionRepositoryMockRecorder) GetByResource(ctx, resource, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByResource", reflect.TypeOf((*MockPermissionRepository)(nil).GetByResource), ctx, resource, action)
}

// List mocks base method.
func (m *MockPermissionRepository) List(ctx context.Context) ([]model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPermissionRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionRepository)(nil).List), ctx)
}

// ListByGroup mocks base method.
func (m *MockPermissionRepository) ListByGroup(ctx context.Context) (map[string][]model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGroup", ctx)
	ret0, _ := ret[0].(map[string][]model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGroup indicates an expected call of ListByGroup.
func (mr *MockPermissionRepositoryMockRecorder) ListByGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGroup", reflect.TypeOf((*MockPermissionRepository)(nil).ListByGroup), ctx)
}

// ListByRoleID mocks base method.
func (m *MockPermissionRepository) ListByRoleID(ctx context.Context, roleID uint64) ([]model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRoleID", ctx, roleID)
	ret0, _ := ret[0].([]model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRoleID indicates an expected call of ListByRoleID.
func (mr *MockPermissionRepositoryMockRecorder) ListByRoleID(ctx, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRoleID", reflect.TypeOf((*MockPermissionRepository)(nil).ListByRoleID), ctx, roleID)
}

// ListByUserID mocks base method.
func (m *MockPermissionRepository) ListByUserID(ctx context.Context, userID uint64) ([]model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockPermissionRepositoryMockRecorder) ListByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockPermissionRepository)(nil).ListByUserID), ctx, userID)
}

// ListGroups mocks base method.
func (m *MockPermissionRepository) ListGroups(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockPermissionRepositoryMockRecorder) ListGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockPermissionRepository)(nil).ListGroups), ctx)
}

// ListPaged mocks base method.
func (m *MockPermissionRepository) ListPaged(ctx context.Context, page, pageSize int) ([]model.Permission, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaged", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.Permission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaged indicates an expected call of ListPaged.
func (mr *MockPermissionRepositoryMockRecorder) ListPaged(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaged", reflect.TypeOf((*MockPermissionRepository)(nil).ListPaged), ctx, page, pageSize)
}

// Update mocks base method.
func (m *MockPermissionRepository) Update(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPermissionRepositoryMockRecorder) Update(ctx, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionRepository)(nil).Update), ctx, perm)
}

// UpsertByMethodPath mocks base method.
func (m *MockPermissionRepository) UpsertByMethodPath(ctx context.Context, perm *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByMethodPath", ctx, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByMethodPath indicates an expected call of UpsertByMethodPath.
func (mr *MockPermissionRepositoryMockRecorder) UpsertByMethodPath(ctx, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByMethodPath", reflect.TypeOf((*MockPermissionRepository)(nil).UpsertByMethodPath), ctx, perm)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// AddPermissions mocks base method.
func (m *MockRoleRepository) AddPermissions(ctx context.Context, roleID uint64, permissionIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissions", ctx, roleID, permissionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissions indicates an expected call of AddPermissions.
func (mr *MockRoleRepositoryMockRecorder) AddPermissions(ctx, roleID, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissions", reflect.TypeOf((*MockRoleRepository)(nil).AddPermissions), ctx, roleID, permissionIDs)
}

// AssignPermissions mocks base method.
func (m *MockRoleRepository) AssignPermissions(ctx context.Context, roleID uint64, permissionIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissions", ctx, roleID, permissionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissions indicates an expected call of AssignPermissions.
func (mr *MockRoleRepositoryMockRecorder) AssignPermissions(ctx, roleID, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissions", reflect.TypeOf((*MockRoleRepository)(nil).AssignPermissions), ctx, roleID, permissionIDs)
}

// AssignToUser mocks base method.
func (m *MockRoleRepository) AssignToUser(ctx context.Context, userID uint64, roleIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToUser", ctx, userID, roleIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToUser indicates an expected call of AssignToUser.
func (mr *MockRoleRepositoryMockRecorder) AssignToUser(ctx, userID, roleIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToUser", reflect.TypeOf((*MockRoleRepository)(nil).AssignToUser), ctx, userID, roleIDs)
}

// CheckUserHasRole mocks base method.
func (m *MockRoleRepository) CheckUserHasRole(ctx context.Context, userID uint64, roleSlug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserHasRole", ctx, userID, roleSlug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserHasRole indicates an expected call of CheckUserHasRole.
func (mr *MockRoleRepositoryMockRecorder) CheckUserHasRole(ctx, userID, roleSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserHasRole", reflect.TypeOf((*MockRoleRepository)(nil).CheckUserHasRole), ctx, userID, roleSlug)
}

// Create mocks base method.
func (m *MockRoleRepository) Create(ctx context.Context, role *model.RoleModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleRepositoryMockRecorder) Create(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepository)(nil).Create), ctx, role)
}

// Delete mocks base method.
func (m *MockRoleRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRoleRepository) Get(ctx context.Context, id uint64) (*model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleRepository)(nil).Get), ctx, id)
}

// GetBySlug mocks base method.
func (m *MockRoleRepository) GetBySlug(ctx context.Context, slug string) (*model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", ctx, slug)
	ret0, _ := ret[0].(*model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockRoleRepositoryMockRecorder) GetBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockRoleRepository)(nil).GetBySlug), ctx, slug)
}

// GetWithPermissions mocks base method.
func (m *MockRoleRepository) GetWithPermissions(ctx context.Context, id uint64) (*model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPermissions", ctx, id)
	ret0, _ := ret[0].(*model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithPermissions indicates an expected call of GetWithPermissions.
func (mr *MockRoleRepositoryMockRecorder) GetWithPermissions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPermissions", reflect.TypeOf((*MockRoleRepository)(nil).GetWithPermissions), ctx, id)
}

// List mocks base method.
func (m *MockRoleRepository) List(ctx context.Context) ([]model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleRepository)(nil).List), ctx)
}

// ListByUserID mocks base method.
func (m *MockRoleRepository) ListByUserID(ctx context.Context, userID uint64) ([]model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockRoleRepositoryMockRecorder) ListByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockRoleRepository)(nil).ListByUserID), ctx, userID)
}

// ListPaged mocks base method.
func (m *MockRoleRepository) ListPaged(ctx context.Context, page, pageSize int) ([]model.RoleModel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaged", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.RoleModel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaged indicates an expected call of ListPaged.
func (mr *MockRoleRepositoryMockRecorder) ListPaged(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaged", reflect.TypeOf((*MockRoleRepository)(nil).ListPaged), ctx, page, pageSize)
}

// ListWithPermissions mocks base method.
func (m *MockRoleRepository) ListWithPermissions(ctx context.Context) ([]model.RoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithPermissions", ctx)
	ret0, _ := ret[0].([]model.RoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithPermissions indicates an expected call of ListWithPermissions.
func (mr *MockRoleRepositoryMockRecorder) ListWithPermissions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithPermissions", reflect.TypeOf((*MockRoleRepository)(nil).ListWithPermissions), ctx)
}

// RemoveFromUser mocks base method.
func (m *MockRoleRepository) RemoveFromUser(ctx context.Context, userID uint64, roleIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUser", ctx, userID, roleIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUser indicates an expected call of RemoveFromUser.
func (mr *MockRoleRepositoryMockRecorder) RemoveFromUser(ctx, userID, roleIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUser", reflect.TypeOf((*MockRoleRepository)(nil).RemoveFromUser), ctx, userID, roleIDs)
}

// RemovePermissions mocks base method.
func (m *MockRoleRepository) RemovePermissions(ctx context.Context, roleID uint64, permissionIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissions", ctx, roleID, permissionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissions indicates an expected call of RemovePermissions.
func (mr *MockRoleRepositoryMockRecorder) RemovePermissions(ctx, roleID, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissions", reflect.TypeOf((*MockRoleRepository)(nil).RemovePermissions), ctx, roleID, permissionIDs)
}

// Update mocks base method.
func (m *MockRoleRepository) Update(ctx context.Context, role *model.RoleModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleRepositoryMockRecorder) Update(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleRepository)(nil).Update), ctx, role)
}

// MockPlayerTagRepository is a mock of PlayerTagRepository interface.
type MockPlayerTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerTagRepositoryMockRecorder
}

// MockPlayerTagRepositoryMockRecorder is the mock recorder for MockPlayerTagRepository.
type MockPlayerTagRepositoryMockRecorder struct {
	mock *MockPlayerTagRepository
}

// NewMockPlayerTagRepository creates a new mock instance.
func NewMockPlayerTagRepository(ctrl *gomock.Controller) *MockPlayerTagRepository {
	mock := &MockPlayerTagRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerTagRepository) EXPECT() *MockPlayerTagRepositoryMockRecorder {
	return m.recorder
}

// GetTags mocks base method.
func (m *MockPlayerTagRepository) GetTags(ctx context.Context, playerID uint64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx, playerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockPlayerTagRepositoryMockRecorder) GetTags(ctx, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockPlayerTagRepository)(nil).GetTags), ctx, playerID)
}

// ReplaceTags mocks base method.
func (m *MockPlayerTagRepository) ReplaceTags(ctx context.Context, playerID uint64, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTags", ctx, playerID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceTags indicates an expected call of ReplaceTags.
func (mr *MockPlayerTagRepositoryMockRecorder) ReplaceTags(ctx, playerID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTags", reflect.TypeOf((*MockPlayerTagRepository)(nil).ReplaceTags), ctx, playerID, tags)
}

// MockReviewRepository is a mock of ReviewRepository interface.
type MockReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepositoryMockRecorder
}

// MockReviewRepositoryMockRecorder is the mock recorder for MockReviewRepository.
type MockReviewRepositoryMockRecorder struct {
	mock *MockReviewRepository
}

// NewMockReviewRepository creates a new mock instance.
func NewMockReviewRepository(ctrl *gomock.Controller) *MockReviewRepository {
	mock := &MockReviewRepository{ctrl: ctrl}
	mock.recorder = &MockReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepository) EXPECT() *MockReviewRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewRepository) Create(ctx context.Context, review *model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReviewRepositoryMockRecorder) Create(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewRepository)(nil).Create), ctx, review)
}

// Delete mocks base method.
func (m *MockReviewRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockReviewRepository) Get(ctx context.Context, id uint64) (*model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReviewRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReviewRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockReviewRepository) List(ctx context.Context, opts repository.ReviewListOptions) ([]model.Review, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]model.Review)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockReviewRepositoryMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReviewRepository)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockReviewRepository) Update(ctx context.Context, review *model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReviewRepositoryMockRecorder) Update(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewRepository)(nil).Update), ctx, review)
}

// MockOperationLogRepository is a mock of OperationLogRepository interface.
type MockOperationLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOperationLogRepositoryMockRecorder
}

// MockOperationLogRepositoryMockRecorder is the mock recorder for MockOperationLogRepository.
type MockOperationLogRepositoryMockRecorder struct {
	mock *MockOperationLogRepository
}

// NewMockOperationLogRepository creates a new mock instance.
func NewMockOperationLogRepository(ctrl *gomock.Controller) *MockOperationLogRepository {
	mock := &MockOperationLogRepository{ctrl: ctrl}
	mock.recorder = &MockOperationLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationLogRepository) EXPECT() *MockOperationLogRepositoryMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockOperationLogRepository) Append(ctx context.Context, log *model.OperationLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockOperationLogRepositoryMockRecorder) Append(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockOperationLogRepository)(nil).Append), ctx, log)
}

// ListByEntity mocks base method.
func (m *MockOperationLogRepository) ListByEntity(ctx context.Context, entityType string, entityID uint64, opts repository.OperationLogListOptions) ([]model.OperationLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEntity", ctx, entityType, entityID, opts)
	ret0, _ := ret[0].([]model.OperationLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByEntity indicates an expected call of ListByEntity.
func (mr *MockOperationLogRepositoryMockRecorder) ListByEntity(ctx, entityType, entityID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEntity", reflect.TypeOf((*MockOperationLogRepository)(nil).ListByEntity), ctx, entityType, entityID, opts)
}

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// AuditOverview mocks base method.
func (m *MockStatsRepository) AuditOverview(ctx context.Context, from, to *time.Time) (map[string]int64, map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditOverview", ctx, from, to)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(map[string]int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuditOverview indicates an expected call of AuditOverview.
func (mr *MockStatsRepositoryMockRecorder) AuditOverview(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditOverview", reflect.TypeOf((*MockStatsRepository)(nil).AuditOverview), ctx, from, to)
}

// AuditTrend mocks base method.
func (m *MockStatsRepository) AuditTrend(ctx context.Context, from, to *time.Time, entity, action string) ([]repository.DateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditTrend", ctx, from, to, entity, action)
	ret0, _ := ret[0].([]repository.DateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditTrend indicates an expected call of AuditTrend.
func (mr *MockStatsRepositoryMockRecorder) AuditTrend(ctx, from, to, entity, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditTrend", reflect.TypeOf((*MockStatsRepository)(nil).AuditTrend), ctx, from, to, entity, action)
}

// Dashboard mocks base method.
func (m *MockStatsRepository) Dashboard(ctx context.Context) (repository.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dashboard", ctx)
	ret0, _ := ret[0].(repository.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dashboard indicates an expected call of Dashboard.
func (mr *MockStatsRepositoryMockRecorder) Dashboard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dashboard", reflect.TypeOf((*MockStatsRepository)(nil).Dashboard), ctx)
}

// OrdersByStatus mocks base method.
func (m *MockStatsRepository) OrdersByStatus(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByStatus", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByStatus indicates an expected call of OrdersByStatus.
func (mr *MockStatsRepositoryMockRecorder) OrdersByStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByStatus", reflect.TypeOf((*MockStatsRepository)(nil).OrdersByStatus), ctx)
}

// RevenueTrend mocks base method.
func (m *MockStatsRepository) RevenueTrend(ctx context.Context, days int) ([]repository.DateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevenueTrend", ctx, days)
	ret0, _ := ret[0].([]repository.DateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevenueTrend indicates an expected call of RevenueTrend.
func (mr *MockStatsRepositoryMockRecorder) RevenueTrend(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevenueTrend", reflect.TypeOf((*MockStatsRepository)(nil).RevenueTrend), ctx, days)
}

// TopPlayers mocks base method.
func (m *MockStatsRepository) TopPlayers(ctx context.Context, limit int) ([]repository.PlayerTop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopPlayers", ctx, limit)
	ret0, _ := ret[0].([]repository.PlayerTop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopPlayers indicates an expected call of TopPlayers.
func (mr *MockStatsRepositoryMockRecorder) TopPlayers(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopPlayers", reflect.TypeOf((*MockStatsRepository)(nil).TopPlayers), ctx, limit)
}

// UserGrowth mocks base method.
func (m *MockStatsRepository) UserGrowth(ctx context.Context, days int) ([]repository.DateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGrowth", ctx, days)
	ret0, _ := ret[0].([]repository.DateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGrowth indicates an expected call of UserGrowth.
func (mr *MockStatsRepositoryMockRecorder) UserGrowth(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGrowth", reflect.TypeOf((*MockStatsRepository)(nil).UserGrowth), ctx, days)
}
