name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - 'frontend/nginx.conf'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: backend
            context: backend
            dockerfile: backend/Dockerfile
            image_suffix: backend
          - name: frontend
            context: frontend
            dockerfile: frontend/Dockerfile
            image_suffix: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare variables
        id: vars
        run: |
          echo "repo_lower=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "sha_short=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          ref="${GITHUB_REF#refs/heads/}"
          ref="${ref#refs/tags/}"
          echo "ref_sanitized=$(echo $ref | tr '/' '-' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: tags
        run: |
          IMAGE_BASE="ghcr.io/${{ steps.vars.outputs.repo_lower }}-${{ matrix.image_suffix }}"
          TAGS="$IMAGE_BASE:sha-${{ steps.vars.outputs.sha_short }},$IMAGE_BASE:${{ steps.vars.outputs.ref_sanitized }}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            TAGS="$TAGS,$IMAGE_BASE:latest"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Prepare build args (optional)
        id: buildargs
        run: |
          ARGS=""
          if [ -n "${{ vars.GOPROXY }}" ]; then
            ARGS="${ARGS}GOPROXY=${{ vars.GOPROXY }}\n"
          fi
          if [ -n "${{ vars.GOPRIVATE }}" ]; then
            ARGS="${ARGS}GOPRIVATE=${{ vars.GOPRIVATE }}\n"
          fi
          if [ -n "${{ vars.GONOSUMDB }}" ]; then
            ARGS="${ARGS}GONOSUMDB=${{ vars.GONOSUMDB }}\n"
          fi
          echo -e "args<<EOF\n${ARGS}EOF" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: ${{ steps.buildargs.outputs.args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64